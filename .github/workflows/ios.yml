name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      # Клонируем репозиторий
      - name: Checkout
        uses: actions/checkout@v4

      # Определяем схему по умолчанию
      - name: Set Default Scheme
        id: set_default_scheme
        run: |
          # Получаем список схем в формате JSON
          scheme_list=$(xcodebuild -list -json 2>/dev/null)
          
          # Проверяем, что команда выполнилась успешно
          if [ -z "$scheme_list" ]; then
            echo "Ошибка: Команда xcodebuild не вернула данные."
            exit 1
          fi
          
          # Парсим JSON для получения первой цели
          default_scheme=$(echo "$scheme_list" | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          
          # Проверяем, что схема была найдена
          if [ -z "$default_scheme" ]; then
            echo "Ошибка: Не удалось получить название цели проекта."
            exit 1
          fi
          
          # Сохраняем схему как выходные данные шага
          echo "default_scheme=$default_scheme" >> $GITHUB_ENV
          echo "Using default scheme: $default_scheme"

      # Строим проект
      - name: Build
        run: |
          # Определяем устройство (первый доступный iPhone Simulator)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          
          # Определяем тип файла (workspace или project)
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then
            filetype_parameter="workspace"
            file_to_build="`ls -A | grep -i \\.xcworkspace\$`"
          else
            filetype_parameter="project"
            file_to_build="`ls -A | grep -i \\\.xcodeproj\$`"
          fi
          
          # Убираем лишние пробелы
          file_to_build=$(echo "$file_to_build" | awk '{$1=$1;print}')
          
          # Выполняем сборку
          xcodebuild build-for-testing \
            -scheme "${{ env.default_scheme }}" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=iOS Simulator,name=$device"

      # Тестируем проект
      - name: Test
        run: |
          # Определяем устройство (первый доступный iPhone Simulator)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          
          # Определяем тип файла (workspace или project)
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then
            filetype_parameter="workspace"
            file_to_build="`ls -A | grep -i \\.xcworkspace\$`"
          else
            filetype_parameter="project"
            file_to_build="`ls -A | grep -i \\\.xcodeproj\$`"
          fi
          
          # Убираем лишние пробелы
          file_to_build=$(echo "$file_to_build" | awk '{$1=$1;print}')
          
          # Выполняем тестирование
          xcodebuild test-without-building \
            -scheme "${{ env.default_scheme }}" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=iOS Simulator,name=$device"
